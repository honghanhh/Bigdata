
import java.util.Arrays;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import java.util.List;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.Optional;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import scala.Tuple2;

public class WordCountStreaming { 
	private static Function2<List<Long>, Optional<Long>, Optional<Long>>
//	   COMPUTE_RUNNING_SUM = (nums, current) -> {
//	     long sum = current.or(0L);
//	     for (long i : nums) {
//	       sum += i;
//	     }
//	     return Optional.of(sum);
		COMPUTE_CUMULATED_WC = () -> {
			
		}
		return Optional.of();
	   };	
	 
	public static void main(String args[]) {
		 
		Logger.getLogger("org").setLevel(Level.OFF);
		Logger.getLogger("akka").setLevel(Level.OFF);

		// Create the context with a 1 second batch size 
		SparkConf sparkConf = new SparkConf().setAppName("WordCountStreaming"); 
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(1)); 

		// Create a JavaReceiverInputDStream on target ip:port and count the 
		// words in input stream of \n delimited text (eg. generated by 'nc') 
		JavaReceiverInputDStream<String> lines = ssc.socketTextStream("localhost", 9999); 
		JavaDStream<String> words = lines.flatMap(x -> Arrays.asList(x.split(" ")).iterator()); 
		JavaPairDStream<String, Integer> wordCounts = words.mapToPair(s -> new Tuple2<>(s, 1)) 
				.reduceByKeyAndWindow((i1, i2) -> i1 + i2, Durations.seconds(10), Durations.seconds(10))
				.updateStateByKey(COMPUTE_CUMULATED_WC); 

		wordCounts.print(); 
		 
		ssc.start(); 
		try { 
			ssc.awaitTermination(); 
		} catch (InterruptedException e) { 
			e.printStackTrace(); 
		} 
	} 
} 